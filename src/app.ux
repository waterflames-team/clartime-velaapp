<script>
import courseDataReader from "./common/js/courseDataReader"

export default {
  processData() {
    /* 数据初始化 */

    // 从 json 获取数据
    const basicInfo = courseDataReader.getBasicInfo()
    const timetableInfo = courseDataReader.getTimetableInfo()
    const mondaySchedule = timetableInfo.Monday
    const coursesInfo = courseDataReader.getCoursesInfo()

    if (!basicInfo || !timetableInfo || !coursesInfo) {
      console.error("数据提取失败：部分数据获取失败")
      return
    }

    // 课程数据整理
    this.courseData = {
      basic: basicInfo,
      courses: coursesInfo,
      timetable: timetableInfo
    }

    // 总 basicinfo 提取
    const courseBasicInfo = this.courseData.basic

    /* 时间处理 */

    // 时间段开始时间 数据校验
    const requiredFields = [
      "morningCourseStartTime",
      "afternoonCourseStartTime",
      "eveningCourseStartTime"
    ]
    requiredFields.forEach((field) => {
      if (
        !courseBasicInfo[field] ||
        typeof courseBasicInfo[field] !== "string" ||
        courseBasicInfo[field].length < 4
      ) {
        throw new Error(`缺失或无效的时间字段: ${field}`)
      }
    })

    // 时间时分分离
    const parseTime = (timeStr) => {
      try {
        return {
          hour: timeStr.substring(0, 2),
          minute: timeStr.substring(2, 4)
        }
      } catch (e) {
        console.error(`时间解析错误: ${timeStr}`, e)
        throw new Error(`无效的时间格式: ${timeStr}`)
      }
    }

    // 时分分离赋值
    const {hour: morningStartHour, minute: morningStartMinute} = parseTime(
      courseBasicInfo.morningCourseStartTime
    )
    const {hour: afternoonStartHour, minute: afternoonStartMinute} = parseTime(
      courseBasicInfo.afternoonCourseStartTime
    )
    const {hour: eveningStartHour, minute: eveningStartMinute} = parseTime(
      courseBasicInfo.eveningCourseStartTime
    )

    /* 课程最终处理部分初始化 */

    // 课程节数初始化
    const morningCourseCount = courseBasicInfo.morningCourseCount
    const afternoonCourseCount = courseBasicInfo.afternoonCourseCount
    const eveningCourseCount = courseBasicInfo.eveningCourseCount
    let currentIndex = 0

    // 时间表结果数组
    const timeTableResult = []

    // 初始化时间跟踪变量
    let currentHour = parseInt(morningStartHour)
    let currentMinute = parseInt(morningStartMinute)
    let currentInterval = basicInfo.intervalTime
    let currentPeriod = "morning"
    let isFirstCourse = true

    // 总课程数
    let totalCourses = morningCourseCount + afternoonCourseCount + eveningCourseCount

    /* 课程合成 */

    for (let i = 0; i < totalCourses; i++) {
      const item = mondaySchedule[i]

      if (!item) break

      // 监测临时课间逻辑
      let tempInterval = false
      if (item.type === "interval") {
        currentInterval = item.intervalTime
        tempInterval = true
        totalCourses++
        continue
      }

      // 处理临时课间恢复逻辑
      let shouldResetInterval = false

      // 时段切换检测
      if (currentPeriod === "morning" && currentIndex >= morningCourseCount) {
        currentPeriod = "afternoon"
        currentHour = parseInt(afternoonStartHour)
        currentMinute = parseInt(afternoonStartMinute)
      } else if (
        currentPeriod === "afternoon" &&
        currentIndex >= morningCourseCount + afternoonCourseCount
      ) {
        currentPeriod = "evening"
        currentHour = parseInt(eveningStartHour)
        currentMinute = parseInt(eveningStartMinute)
      }

      // 安全访问课程时间信息
      const timeInfo = item.courseTimeInfo?.[0]
      if (!timeInfo) {
        console.error(`第${i + 1}节课缺少课程时间信息`)
        continue
      }

      // 处理课程时间
      const courseInfo = coursesInfo[timeInfo?.courseId]
      if (courseInfo) {
        // 计算结束时间
        const duration = timeInfo.duration || 45
        let endHour = currentHour
        let endMinute = currentMinute + duration

        // 分钟进位计算
        let totalMinutes = currentMinute + duration
        endHour = currentHour + Math.floor(totalMinutes / 60)
        endMinute = totalMinutes % 60

        // 构建结果对象
        timeTableResult.push({
          courseName: courseInfo.courseName,
          teacher: courseInfo.teacher,
          classroom: courseInfo.classroom,
          timeHour: currentHour.toString().padStart(2, "0"),
          timeMinute: currentMinute.toString().padStart(2, "0")
        })

        // 统一更新时间计算（首项课程后开始应用课间）
        // 统一应用课间时间
        currentMinute = endMinute + (isFirstCourse ? 0 : currentInterval)
        currentHour = endHour + Math.floor(currentMinute / 60)
        currentMinute = currentMinute % 60

        if (isFirstCourse) {
          isFirstCourse = false
        }

        // 标记临时课间需要重置
        shouldResetInterval = tempInterval

        // 应用临时课间后立即恢复默认（仅当tempInterval为true）
        if (shouldResetInterval) {
          currentInterval = basicInfo.intervalTime
          shouldResetInterval = false
        }
      }
    }

    // 打印处理后的时间表
    const timeTableResultAfterProcessing = timeTableResult.map((item) => ({
      courseName: item.courseName,
      teacher: item.teacher,
      classroom: item.classroom,
      time: `${item.timeHour}:${item.timeMinute}`
    }))
    console.log(timeTableResultAfterProcessing)
  },

  onCreate() {
    console.log("app created")
    try {
      // 异步操作代码
      this.processData()
    } catch (error) {
      console.error("processData 函数执行出错:", error)
    }
  },

  onDestroy() {
    console.log("app destroyed")
  }
}
</script>
