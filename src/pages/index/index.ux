<template>
  <div class="page">
    <stack>
      <scroll class="content horizontal-center" scroll-y="true" scroll-x="false">
        <div class="content-home horizontal-center">
          <div class="component-nav"></div>
          <div style="display: flex; flex-direction: row">
            <div class="component-indexCard screen-center">
              <div class="screen-center">
                <div class="screen-center">
                  <text class="component-indexCard-timeHM">{{ time }}</text>
                  <div class="component-indexCard-timeSGroup screen-center">
                    <text class="component-indexCard-timeS">{{ seconds }}</text>
                  </div>
                </div>
                <div class="gap-80"></div>
                <div class="screen-center">
                  <text class="component-coursePresentations-text">{{ day }}</text>
                  <text class="component-coursePresentations-text">{{ dayNum }}</text>
                  <text class="component-coursePresentations-text">{{ weekNum }}</text>
                </div>
              </div>
            </div>
            <div class="gap-60"></div>
            <div class="component-indexCard" style="display: flex; flex-direction: column">
              <div class="component-coursePresentations-head vertical-left">
                <text class="component-coursePresentations-text">{{courseSchedule[indexNow].description}}</text>
                <text class="component-coursePresentations-courses">{{courseSchedule[indexNow].courseName}}</text>
              </div>
              <div class="component-coursePresentations-detail vertical-left">
                <text class="component-coursePresentations-text">{{courseSchedule[indexNow].timeRange}}</text>
                <text class="component-coursePresentations-text">{{courseSchedule[indexNow].courseRoom}}</text>
                <text class="component-coursePresentations-text">{{courseSchedule[indexNow].courseTeacher}}</text>
              </div>
            </div>
          </div>

          <div class="gap-60"></div>

          <div class="component-remainingTimeCard screen-center">
            <text class="component-remainingTimeCard-text">{{ remain }}</text>
          </div>

          <div class="gap-60"></div>

          <div class="component-nextCourseCard horizontal-center">
            <div class="component-nextCourseCard-head horizontal-center">
              <text class="component-nextCourseCard-text">下一节</text>
              <text class="component-nextCourseCard-course">{{courseSchedule[indexNow+1].courseName}}</text>
            </div>
            <text class="component-nextCourseCard-text component-nextCourseCard-bottom">{{courseSchedule[indexNow+1].timeRange}}</text>
          </div>
        </div>

        <div class="content-other horizontal-center">
          <div class="component-nav"></div>
          <div style="display: flex; flex-direction: row">
            <div class="component-other-button_q" onclick="jumpAC">
              <image class="component-other-icon_q" src="/common/icon_AllCourses.png" />
              <text class="component-other-button_qText">全部课程</text>
            </div>

            <div class="gap-60"></div>

            <div class="component-other-button_q" onclick="jumpCC">
              <image class="component-other-icon_q" src="/common/icon_CourseChange.png" />
              <text class="component-other-button_qText">课程调节</text>
            </div>
          </div>

          <div class="gap-60"></div>

          <div class="component-other-button_l" onclick="jumpAb">
            <div class="component-other-button-head vertical-left">
              <text class="component-other-button_lText">设置</text>
              <text class="component-other-button_lDescribe">实验性设置</text>
            </div>
            <image class="component-other-icon_l" src="/common/icon_Set.png" />
          </div>

          <div class="gap-60"></div>

          <div class="component-other-button_l" onclick="jumpAb">
            <div class="component-other-button-head vertical-left">
              <text class="component-other-button_lText">关于</text>
              <text class="component-other-button_lDescribe">澄序课程表</text>
            </div>
            <image class="component-other-icon_l" src="/common/icon_About.png" />
          </div>

        </div>
      </scroll>
      <div class="component-nav">
        <text class="component-nav-title-text">{{ title_home }}</text>
        <!-- <text class="component-nav-title-time">{{ time }}</text> -->
      </div>
    </stack>
  </div>
</template>

<script>
export default {
  private: {
    title_home: "课程表",
    title_other: "更多",
    time: "25:61",
    seconds: "61",
    day: "13月32日",
    dayNum: "星期八",
    weekNum: "第亿周",
    remain: "还有 61 分钟下课",

    courseSchedule: [],
    coursesName: "文语",
    coursesStartTime: "53:61 - 02:71",
    coursesRoom: "室教101",
    coursesTeacher: "师老张",
    autoDistance: 0,
    indexNow: 0,

    timer: null, // 添加定时器变量
    updateTimer: null
  },

  getCourses() {
    const dayMap = {
      周一: "Mon",
      周二: "Tue",
      周三: "Wed",
      周四: "Thu",
      周五: "Fri",
      周六: "Sat",
      周日: "Sun"
    }
    const whichDay = dayMap[this.dayNum]
    this.courseSchedule = this.$app.$def.courseDataParse.getCourseSchedule(whichDay)
  },

  getCurrentCourseIndex() {
    //寻找最近项目的索引

    const currentTime = this.$app.$def.timeUpdate.updateTime()
    const currentHours = currentTime.hours
    const currentMinutes = currentTime.minutes

    // 如果当前时间小于第一节课时间，返回0
    if (
      this.courseSchedule.length > 0 &&
      (currentHours < this.courseSchedule[1].timeHour ||
        (currentHours === this.courseSchedule[1].timeHour &&
          currentMinutes < this.courseSchedule[1].timeMinute))
    ) {
      return 0
    }

    // 正常课程定位判断
    for (let i = 0; i < this.courseSchedule.length - 1; i++) {
      const currentItem = this.courseSchedule[i]
      const nextItem = this.courseSchedule[i + 1]

      if (
        (currentHours > currentItem.timeHour ||
          (currentHours === currentItem.timeHour && currentMinutes >= currentItem.timeMinute)) &&
        (currentHours < nextItem.timeHour ||
          (currentHours === nextItem.timeHour && currentMinutes < nextItem.timeMinute))
      ) {
        return i
      }
    }

    // 无法判断就返回最后一个
    return this.courseSchedule.length - 1
  },

  getRemainingTime() {
    // 取元列表

    const currentIndex = this.getCurrentCourseIndex()
    if (currentIndex === this.courseSchedule.length) {
      return "今日课程结束～"
    }

    const nextCourse = this.courseSchedule[currentIndex + 1]
    const thisCourse = this.courseSchedule[currentIndex]
    const currentTime = this.$app.$def.timeUpdate.updateTime()

    // 提前判断结束，以防止下一项无法取到导致的出错
    if (thisCourse.type === "end") {
      return "今日课程结束～"
    }

    // 计算分钟差
    const currentTotalMinutes = String(Number(currentTime.hours) * 60 + Number(currentTime.minutes))
    const nextCourseTotalMinutes = String(
      Number(nextCourse.timeHour) * 60 + Number(nextCourse.timeMinute)
    )
    const remainingMinutes = nextCourseTotalMinutes - currentTotalMinutes

    if (thisCourse.type === "course") {
      return "还有 " + remainingMinutes + " 分钟下课"
    } else if (
      thisCourse.type === "interval" ||
      thisCourse.type === "rest" ||
      thisCourse.type === "start"
    ) {
      return "还有 " + remainingMinutes + " 分钟上课"
    }

    return remainingMinutes
  },

  courseRelatedUpadate() {
    this.getCourses()
    this.weekNum = this.$app.$def.courseDataParse.getWeekNumber()
    this.remain = this.getRemainingTime()
    this.autoDistance = String(Number(this.getCurrentCourseIndex()) * 308) + "px"
    this.indexNow = this.getCurrentCourseIndex()
    
  },
  onInit() {
    // 初始化数据
    const dateData = this.$app.$def.dateUpdate.updateDate()
    this.day = dateData.day
    this.dayNum = dateData.dayNum
    this.time = this.$app.$def.timeUpdate.updateTime().time
    this.seconds = this.$app.$def.timeUpdate.updateTime().seconds
    this.courseRelatedUpadate()

    console.log(this.courseSchedule)
    console.log(this.indexNow)
  },

  onShow() {
    // 初始化数据
    const dateData = this.$app.$def.dateUpdate.updateDate()
    this.day = dateData.day
    this.dayNum = dateData.dayNum
    this.time = this.$app.$def.timeUpdate.updateTime().time
    this.seconds = this.$app.$def.timeUpdate.updateTime().seconds
    this.courseRelatedUpadate()

    // 启动定时器，每秒更新
    this.timer = this.$app.$def.timeUpdate.updateTimePersecond((timeData) => {
      this.time = timeData.time
      this.seconds = timeData.seconds
      if (this.getCurrentCourseIndex() != this.indexNow) {
        this.courseRelatedUpadate()
      }
    })
  },

  onDestroy() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
    // this.$app.$def.timeUpdate.stopTimer(this.updateTimer)
  },

  onHide() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
    // this.$app.$def.timeUpdate.stopTimer(this.updateTimer)
  },

  jumpAC() {
    this.$app.$def.router.push({
      uri: "pages/other/AllCourses"
    })
  },
  jumpCC() {
    this.$app.$def.router.push({
      uri: "pages/other/CourseChange"
    })
  },
  jumpAb() {
    this.$app.$def.router.push({
      uri: "pages/other/about"
    })
  }
}
</script>

<style>
@import "../../common/css/universal.css";
@import "../../common/css/nav.css";

/* 界面布局 */
.content {
  width: 100%;
  height: 480px;

  scroll-snap-type: y cross;
  scroll-snap-stop: always;
}

.content-home {
  width: 100%;
  height: 480px;
  scroll-snap-align: start;
}

.content-other {
  width: 100%;
  height: 480px;
  scroll-snap-align: start;
}

/* 时间卡片 */
.component-indexCard {
  width: 157px;
  height: 199px;
  border-radius: 24px;
  background-color: rgba(0, 136, 255, 1);
}

.component-indexCard-timeHM {
  font-size: 42px;
  font-weight: 700;
  letter-spacing: 0px;
  line-height: 55.69px;
  color: rgba(255, 255, 255, 1);
  text-align: center;
}

.component-indexCard-timeSGroup {
  width: 30px;
  height: 18px;
  opacity: 1;
  border-radius: 24px;
  background-color: rgba(255, 255, 255, 0.3);
}

.component-indexCard-timeS {
  font-size: 11px;
  font-weight: 700;
  letter-spacing: 0px;
  color: rgba(255, 255, 255, 1);
  text-align: center;
}

.component-indexCard-dayText {
  font-size: 24px;
  font-weight: 700;
  letter-spacing: 0px;
  line-height: 31.82px;
  color: rgba(255, 255, 255, 1);
  text-align: center;
}

/* 课程卡片 */
.component-coursePresentations-head {
  position: absolute;
  left: 12px;
  top: 12px;
}
.component-coursePresentations-detail {
  position: absolute;
  left: 12px;
  bottom: 12px;
}
.component-coursePresentations-text {
  font-size: 20px;
  font-weight: 500;
  letter-spacing: 0px;
  line-height: 26.52px;
  color: rgba(255, 255, 255, 0.6);
  text-align: left;
}
.component-coursePresentations-courses {
  font-size: 32px;
  font-weight: 800;
  letter-spacing: 0px;
  line-height: 42.43px;
  color: rgba(255, 255, 255, 1);
  text-align: left;
}

/* 提示卡片 */
.component-remainingTimeCard {
  width: 320px;
  height: 68px;
  opacity: 1;
  border-radius: 24px;
  background-color: rgba(255, 255, 255, 0.1);
}
.component-remainingTimeCard-text {
  font-size: 24px;
  font-weight: 700;
  letter-spacing: 0px;
  line-height: 31.82px;
  color: rgba(255, 255, 255, 1);
  text-align: center;
}

/* 下节课卡片 */
.component-nextCourseCard {
  width: 320px;
  height: 132px;
  opacity: 1;
  border-radius: 24px;
  background-color: rgba(255, 255, 255, 0.1);
}
.component-nextCourseCard-head {
  position: absolute;
  top: 12px;
}
.component-nextCourseCard-text {
  font-size: 20px;
  font-weight: 500;
  letter-spacing: 0px;
  line-height: 26.52px;
  color: rgba(255, 255, 255, 0.6);
  text-align: left;
}
.component-nextCourseCard-course {
  font-size: 32px;
  font-weight: 700;
  letter-spacing: 0px;
  line-height: 42.43px;
  color: rgba(255, 255, 255, 1);
  text-align: left;
}
.component-nextCourseCard-bottom {
  position: absolute;
  bottom: 12px;
}

/* 更多卡片 - 方形部分 */

.component-other-button_q {
  width: 157px;
  height: 157px;
  opacity: 1;
  border-radius: 24px;
  background-color: rgba(255, 255, 255, 0.1);
}
.component-other-button_qText {
  position: absolute;
  left: 12px;
  bottom: 12px;

  font-size: 30px;
  font-weight: 700;
  letter-spacing: 0px;
  line-height: 39.78px;
  color: rgba(255, 255, 255, 1);
  text-align: left;
}
.component-other-icon_q {
  position: absolute;
  left: 12px;
  top: 12px;
  width: 60px;
  height: 60px;

  object-fit: contain;
}
.icon_AC {
  box-shadow: 0px 0px 20px rgba(31, 136, 255, 0.5);
  border-radius: 30px;
}
.icon_CC {
  box-shadow: 0px 0px 20px rgba(255, 171, 31, 0.5);
  border-radius: 30px;
}

/* 更多卡片 - 长方形部分 */
.component-other-button_l {
  width: 320px;
  height: 121px;
  opacity: 1;
  border-radius: 24px;
  background-color: rgba(255, 255, 255, 0.1);
}
.component-other-button-head {
  position: absolute;
  left: 12px;
  top: 12px;
}
.component-other-button_lText {
  font-size: 30px;
  font-weight: 700;
  letter-spacing: 0px;
  line-height: 39.78px;
  color: rgba(255, 255, 255, 1);
  text-align: left;
}
.component-other-button_lDescribe {
  font-size: 18px;
  font-weight: 500;
  letter-spacing: 0px;
  line-height: 23.87px;
  color: rgba(255, 255, 255, 0.6);
  text-align: left;
}
.component-other-icon_l {
  position: absolute;
  width: 60px;
  height: 60px;
  right: 12px;
  bottom: 12px;

  object-fit: contain;
}
.icon_ST{
  box-shadow: 0px 0px 20px rgba(130, 130, 130, 0.5);
  border-radius: 30px;
}
.icon_Ab{
  box-shadow: 0px 0px 20px rgba(106, 31, 255, 0.5);
  border-radius: 30px;
}
</style>
