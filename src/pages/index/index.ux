<template>
  <div class="page">
    <div class="component-nav">
      <div class="component-nav-button" onclick="quit">
        <image class="component-nav-back" src="/common/Back.png" />
      </div>
      <div class="component-nav-title">
        <text class="component-nav-title-text">{{ title }}</text>
      </div>
      <div class="component-nav-button" onclick="jumpToOther">
        <div class="component-nav-infoIcon">
          <div class="component-nav-infoIconPoints"></div>
          <div class="gap-6"></div>
          <div class="component-nav-infoIconPoints"></div>
          <div class="gap-6"></div>
          <div class="component-nav-infoIconPoints"></div>
        </div>
      </div>
    </div>

    <div class="gap-8"></div>

    <div class="component-index-courseCard-card">
      <div class="component-index-courseCard-cardContent">
        <text class="component-index-courseCard-card-timeText">{{ time }}</text>
        <div class="gap-8"></div>
        <div class="component-index-courseCard-card-dayDiv">
          <text class="component-index-courseCard-card-dayText">{{ day }}&nbsp;{{ dayNum }}</text>
          <text class="component-index-courseCard-card-dayText">{{ weekNum }}</text>
        </div>
        <div class="gap-8"></div>
        <text class="component-index-courseCard-card-remainingTimeText">{{ remain }}</text>
      </div>
    </div>

    <div class="gap-8"></div>
    
  </div>
</template>

<script>
import {title} from "@system.audio"
import router from "@system.router"
import app from "@system.app"

export default {
  private: {
    title: "课程表",
    time: "",
    day: "",
    dayNum: "",
    weekNum: "第一周",
    remain: "还有 13 分钟下课",
    timer: null // 添加定时器变量
  },

  onInit() {
    this.updateDate()
    this.updateTime() // 初始化时调用一次 updateTime
    this.timer = setInterval(() => this.updateTime(), 1000) // 每秒调用一次 updateTime
  },

  onDestroy() {
    clearInterval(this.timer) // 清除定时器，防止内存泄漏
  },

  quit() {
    app.terminate()
  },

  updateTime() {
    const now = new Date()
    const hours = String(now.getHours()).padStart(2, "0")
    const minutes = String(now.getMinutes()).padStart(2, "0")
    // const Seconds = String(now.getSeconds()).padStart(2, "0")
    this.time = `${hours}:${minutes}`
  },

  updateDate() {
    const date = new Date()
    const month = date.getMonth() + 1
    const dayOfMonth = date.getDate()
    const dayOfWeek = date.getDay()
    const days = ["周日", "周一", "周二", "周三", "周四", "周五", "周六"]

    this.day = `${month}月${dayOfMonth}日`
    this.dayNum = days[dayOfWeek]
  },

  jumpToOther() {
    router.push({
      uri: "/pages/other"
    })
  }
}
</script>

<style>
@import "../../common/css/universal.css";
@import "../../common/css/nav.css";

.component-index-courseCard-card {
  display: flex;
  justify-content: center;
  align-items: center;

  padding-top: 12px;
  padding-bottom: 12px;
  width: 324px;
  height: 190px;
  border-radius: 36px;
  background-color: rgba(38, 38, 38, 1);
}

.component-index-courseCard-cardContent {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.component-index-courseCard-card-timeText {
  font-size: 50px;
  font-weight: 900;
  line-height: 66.3px;
  color: rgba(255, 255, 255, 1);
}

.component-index-courseCard-card-dayDiv {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.component-index-courseCard-card-dayText {
  font-size: 28px;
  font-weight: 500;
  letter-spacing: 0px;
  line-height: 30px;
  color: rgba(255, 255, 255, 0.6);

  white-space: pre-wrap;
}

.component-index-courseCard-card-remainingTimeText {
  font-size: 18px;
  font-weight: 500;
  letter-spacing: 0px;
  line-height: 23.87px;
  color: rgba(255, 255, 255, 0.6);
  text-align: center;
  vertical-align: top;
}
</style>