<template>
  <div class="page">
    <scroll class="content" scroll-y="true" scroll-x="false">
      <div class="content-home">
        <div class="component-nav">
          <text class="component-nav-title-text">{{ title_home }}</text>
          <text class="component-nav-title-time">{{ time }}</text>
        </div>

        <div class="gap-110"></div>

        <div class="component-index-courseCard-card">
          <div class="component-index-courseCard-cardContent">
            <text class="component-index-courseCard-card-timeText">{{ fullTime }}</text>
            <div class="gap-80"></div>
            <div class="component-index-courseCard-card-dayDiv">
              <text class="component-index-courseCard-card-dayText">
                {{ day }}&nbsp;{{ dayNum }}
              </text>
              <text class="component-index-courseCard-card-dayText">{{ weekNum }}</text>
            </div>
            <div class="gap-80"></div>
            <text class="component-index-courseCard-card-remainingTimeText">{{ remain }}</text>
          </div>
        </div>

        <div class="gap-80"></div>

        <scroll
          class="component-coursePresentations"
          bounces="true"
          scroll-x="true"
          scroll-left="{{autoDistance}}"
        >
          <div class="component-coursePresentations-border" for="{{courseSchedule}}">
            <div class="component-coursePresentations-content" if="{{indexNow === $idx}}">
              <div class="gap-142"></div>
              <div>
                <text class="component-coursePresentations-text">{{ $item.description }}</text>
              </div>
              <text class="component-coursePresentations-courses">{{ $item.courseName }}</text>
              <div class="gap-214"></div>
              <div class="component-coursePresentations-detail">
                <text class="component-coursePresentations-text">{{ $item.timeRange }}</text>
                <text class="component-coursePresentations-text">{{ $item.courseRoom }}</text>
                <text class="component-coursePresentations-text">{{ $item.courseTeacher }}</text>
              </div>
            </div>
            <div
              class="component-coursePresentations-content"
              style="background-color: rgba(38, 38, 38, 1)"
              else
            >
              <div class="gap-142"></div>
              <div>
                <text class="component-coursePresentations-text">{{ $item.description }}</text>
              </div>
              <text class="component-coursePresentations-courses">{{ $item.courseName }}</text>
              <div class="component-coursePresentations-detail">
                <text class="component-coursePresentations-text">{{ $item.timeRange }}</text>
                <text class="component-coursePresentations-text">{{ $item.courseRoom }}</text>
                <text class="component-coursePresentations-text">{{ $item.courseTeacher }}</text>
              </div>
            </div>
          </div>
        </scroll>
      </div>

      <div class="content-other">
        <div class="component-nav">
          <text class="component-nav-title-text">{{ title_other }}</text>
          <text class="component-nav-title-time">{{ time }}</text>
        </div>

        <div class="gap-110"></div>

        <div class="component-other-button_Background" onclick="jumpAC">
          <div class="gap-190"></div>
          <div class="component-other-button component-other-button_AC">
            <image class="component-other-icon" src="/common/icon_AllCourses.png" />
          </div>
          <div class="gap-100"></div>
          <text class="component-other-button_Text">全部课程</text>
        </div>

        <div class="gap-60"></div>

        <div class="component-other-button_Background" onclick="jumpCC">
          <div class="gap-190"></div>
          <div class="component-other-button component-other-button_CC">
            <image class="component-other-icon" src="/common/icon_CourseChange.png" />
          </div>
          <div class="gap-100"></div>
          <text class="component-other-button_Text">课程调节</text>
        </div>

        <div class="gap-60"></div>

        <div class="component-other-button_Background" onclick="jumpAb">
          <div class="gap-190"></div>
          <div class="component-other-button component-other-button_Ab">
            <image class="component-other-icon" src="/common/icon_About.png" />
          </div>
          <div class="gap-100"></div>
          <text class="component-other-button_Text">关于</text>
        </div>
      </div>
    </scroll>
  </div>
</template>

<script>
export default {
  private: {
    title_home: "课程表",
    title_other: "更多",
    time: "25:61",
    fullTime: "25:61:61",
    day: "13月32日",
    dayNum: "星期八",
    weekNum: "第亿周",
    remain: "还有 61 分钟下课",

    courseSchedule: [],
    coursesName: "文语",
    coursesStartTime: "53:61 - 02:71",
    coursesRoom: "室教101",
    coursesTeacher: "师老张",
    autoDistance: 0,
    indexNow: 0,

    timer: null, // 添加定时器变量
    updateTimer: null
  },

  getCourses() {
    const dayMap = {
      周一: "Mon",
      周二: "Tue",
      周三: "Wed",
      周四: "Thu",
      周五: "Fri",
      周六: "Sat",
      周日: "Sun"
    }
    const whichDay = dayMap[this.dayNum]
    this.courseSchedule = this.$app.$def.courseDataParse.getCourseSchedule(whichDay)
  },

  getCurrentCourseIndex() {
    //寻找最近项目的索引

    const currentTime = this.$app.$def.timeUpdate.updateTime()
    const currentHours = currentTime.hours
    const currentMinutes = currentTime.minutes

    for (let i = 0; i < this.courseSchedule.length - 1; i++) {
      const currentItem = this.courseSchedule[i]
      const nextItem = this.courseSchedule[i + 1]
      // console.log(currentItem.timeHour, currentItem.timeMinute)
      // console.log("daduan")
      // console.log(nextItem.timeHour, nextItem.timeMinute)

      if (
        (currentHours > currentItem.timeHour ||
          (currentHours === currentItem.timeHour && currentMinutes >= currentItem.timeMinute)) &&
        (currentHours < nextItem.timeHour ||
          (currentHours === nextItem.timeHour && currentMinutes < nextItem.timeMinute))
      ) {
        return i + 1
      }
    }
    return this.courseSchedule.length
  },

  getRemainingTime() {
    // 取元列表

    const currentIndex = this.getCurrentCourseIndex()
    if (currentIndex === this.courseSchedule.length) {
      return "今日课程结束～"
    }

    const nextCourse = this.courseSchedule[currentIndex]
    const thisCourse = this.courseSchedule[currentIndex - 1]
    const currentTime = this.$app.$def.timeUpdate.updateTime()

    // 计算分钟差
    const currentTotalMinutes = String(Number(currentTime.hours) * 60 + Number(currentTime.minutes))
    const nextCourseTotalMinutes = String(
      Number(nextCourse.timeHour) * 60 + Number(nextCourse.timeMinute)
    )

    const remainingMinutes = nextCourseTotalMinutes - currentTotalMinutes

    if (thisCourse.type === "course") {
      return "还有 " + remainingMinutes + " 分钟下课"
    } else if (thisCourse.type === "interval" || thisCourse.type === "rest") {
      return "还有 " + remainingMinutes + " 分钟上课"
    } else if (thisCourse.type === "end") {
      return "今日课程结束～"
    }

    return remainingMinutes
  },

  courseRelatedUpadate() {
    this.getCourses()
    this.weekNum = this.$app.$def.courseDataParse.getWeekNumber()
    this.remain = this.getRemainingTime()

    this.autoDistance = String(Number(this.getCurrentCourseIndex() - 1) * (308 + 30)) + "px"

    // console.log(this.autoDistance)

    this.indexNow = this.getCurrentCourseIndex() - 1
  },

  onInit() {
    const dateData = this.$app.$def.dateUpdate.updateDate()
    this.day = dateData.day
    this.dayNum = dateData.dayNum
    ;(this.time = this.$app.$def.timeUpdate.updateTime().time),
      (this.fullTime = this.$app.$def.timeUpdate.updateTime().fullTime)
    this.timer = this.$app.$def.timeUpdate.updateTimePersecond((timeData) => {
      this.time = timeData.time
      this.fullTime = timeData.fullTime
    })

    this.courseRelatedUpadate()
    this.updateTimer = this.$app.$def.timeUpdate.updateTimePersecond(() => {
      this.courseRelatedUpadate()
    })
  },

  onDestroy() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
    this.$app.$def.timeUpdate.stopTimer(this.updateTimer)
  },

  jumpAC() {
    this.$app.$def.router.push({
      uri: "pages/other/AllCourses"
    })
  },
  jumpCC() {
    this.$app.$def.router.push({
      uri: "pages/other/CourseChange"
    })
  },
  jumpAb() {
    this.$app.$def.router.push({
      uri: "pages/other/about"
    })
  }
}
</script>

<style>
@import "../../common/css/universal.css";
@import "../../common/css/nav.css";
/* 界面布局 */

.content {
  display: flex;
  flex-direction: column;
  /* justify-content: center; */
  /* 在同一垂直线上居中 */
  align-items: center;
  /* 在同一水平线上居中 */

  width: 100%;
  height: 100%;

  scroll-snap-type: y cross;
  scroll-snap-stop: always;
}

.content-home {
  display: flex;
  flex-direction: column;
  /* justify-content: center; */
  /* 在同一垂直线上居中 */
  align-items: center;
  /* 在同一水平线上居中 */
  width: 100%;

  scroll-snap-align: start;
}

.content-other {
  display: flex;
  flex-direction: column;
  /* justify-content: center; */
  /* 在同一垂直线上居中 */
  align-items: center;
  /* 在同一水平线上居中 */

  height: 480px;

  scroll-snap-align: start;
}

/* 卡片 */
.component-index-courseCard-card {
  display: flex;
  justify-content: center;
  align-items: center;

  padding-top: 12px;
  padding-bottom: 12px;
  width: 324px;
  /* height: 190px; */
  height: 210px;
  border-radius: 36px;
  background-color: rgba(38, 38, 38, 1);
}

.component-index-courseCard-cardContent {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.component-index-courseCard-card-timeText {
  font-size: 50px;
  font-weight: 900;
  line-height: 66.3px;
  text-align: center;
  color: rgba(255, 255, 255, 1);
}

.component-index-courseCard-card-dayDiv {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.component-index-courseCard-card-dayText {
  font-size: 28px;
  font-weight: 500;
  letter-spacing: 0px;
  line-height: 30px;
  color: rgba(255, 255, 255, 0.6);
  text-align: center;
  white-space: pre-wrap;
}

.component-index-courseCard-card-remainingTimeText {
  font-size: 18px;
  font-weight: 500;
  letter-spacing: 0px;
  line-height: 23.87px;
  color: rgba(255, 255, 255, 0.6);
  text-align: center;
  vertical-align: top;
}

/* 实时课程 */
.component-coursePresentations {
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;

  margin-bottom: 30px;

  width: 100%;
  height: 190px;

  scroll-snap-type: x cross;
  scroll-snap-align: start;
  scroll-snap-stop: always;
}

.component-coursePresentations-border {
  display: flex;
  justify-content: center;
  align-items: center;

  width: 308px;
  height: 190px;

  scroll-snap-align: center;
}

.component-coursePresentations-content {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;

  left: 0px;
  top: 0px;
  width: 300px;
  height: 190px;
  opacity: 1;
  border-radius: 36px;
  background-color: rgba(13, 110, 255, 1);
}

.component-coursePresentations-detail {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: flex-start;
  position: absolute;
  bottom: 13.8px;
  width: 260px;
}

.component-coursePresentations-text {
  left: 19px;
  opacity: 1;
  font-size: 20px;
  font-weight: 550;
  letter-spacing: 0px;
  line-height: 26.52px;
  color: rgba(255, 255, 255, 0.6);
  text-align: left;
  vertical-align: top;
}

.component-coursePresentations-courses {
  left: 19px;
  opacity: 1;
  font-size: 32px;
  font-weight: 550;
  letter-spacing: 0px;
  line-height: 42.43px;
  color: rgba(255, 255, 255, 1);
  text-align: left;
  vertical-align: top;
}

/* other part */

.component-other-button_Background {
  display: flex;
  flex-direction: row;
  align-items: center;

  width: 324px;
  height: 110px;
  opacity: 1;
  border-radius: 36px;
  background-color: rgba(38, 38, 38, 1);
}

.component-other-button {
  justify-content: center;
  align-items: center;

  width: 70px;
  height: 70px;
  opacity: 1;
  border-radius: 30px;
}

.component-other-button_AC {
  background-color: rgba(31, 136, 255, 1);
}

.component-other-button_CC {
  background-color: rgba(255, 171, 31, 1);
}

.component-other-button_Ab {
  background-color: rgba(41, 187, 5, 1);
}

.component-other-button_Text {
  left: 8px;
  opacity: 1;
  font-size: 34px;
  font-weight: 550;
  color: rgba(255, 255, 255, 1);
  text-align: left;
  vertical-align: middle;
}

.component-other-icon {
  width: 35px;
  height: 35px;
  opacity: 1;
}
</style>
