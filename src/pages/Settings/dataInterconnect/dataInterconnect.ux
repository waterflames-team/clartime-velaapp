<template>
  <div class="page">
    <stack>
      <!-- 动态效果 -->
      <scroll class="content horizontal-center" scroll-y="true" bounces="true">
        <div class="component-nav"></div>
        <div class="component-about-textContent-container">
          <text class="component-about-textContent-textS">传输数据测试</text>
          <div class="gap-80"></div>
          <!-- <text class="component-about-textContent-textS">1.{{CourseData}}</text> -->
          <text class="component-about-textContent-textS" style="height: 1000px;">2.{{CourseData2}}</text>
        </div>
      </scroll>

      <div class="component-nav">
        <div class="component-nav-backGroup" onclick="exit">
          <img src="/common/assets/back_button.png" class="component-nav-backButton" />
          <text class="component-nav-title-text-backb">{{ title }}</text>
        </div>
        <text class="component-nav-title-time">{{ time }}</text>
      </div>
    </stack>
  </div>
</template>
<script>
import brightness from "@system.brightness"
import interconnect from "@system.interconnect";

export default {
  private: {
    title: "数据同步",
    time: "",
    timer: null,
    CourseData: "",
    CourseData2: ""
  },

  onInit() {
    let conn = interconnect.instance()
    conn.onmessage = (data) => {
      this.CourseData = data.data
      this.$app.$def.dataManage.changeCourseData("user", data.data)
    }


    this.timer = setInterval(() => {
      this.updateTime()
    }, 1000)
  },

  onShow() {
    brightness.setKeepScreenOn({
      keepScreenOn: true
    })
  },

  onHide() {
    brightness.setKeepScreenOn({
      keepScreenOn: false
    })
  },

  onShow() {
    let OuterThis = this
    ;(this.time = this.$app.$def.timeUpdate.updateTime().time),
      (this.timer = this.$app.$def.timeUpdate.updateTimePerminute((timeData) => {
        this.time = timeData.time
      }))
    brightness.setKeepScreenOn({
      keepScreenOn: true
    })
  },

  onDestroy() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
    globalThis.conn.removeListener("CourseData")
  },
  onHide() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
  },

  exit() {
    this.$app.$def.router.back()
  }
}
</script>

<style>
@import "../../../common/style/universal.css";
@import "../../../common/style/component.css";

.content {
  width: 336px;
  height: 480px;

  display: flex;
  flex-direction: column;

  scroll-snap-type: y cross;
}

.card {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
}

.component-about-textContent-container {
  opacity: 1;

  display: flex;
  flex-direction: column;
  padding: 12px;

  width: 312px;
  border-radius: 30px;
  background-color: rgba(255, 255, 255, 0.1);
}
.component-about-textContent-textS {
  font-size: 20px;
  font-weight: 500;
  letter-spacing: 0px;
  color: rgba(255, 255, 255, 0.6);
  white-space: pre-line;
  flex-wrap: wrap;
}

.item {
	height: 102px;
  width: 324px;
  left:6px;
	margin-top: -4px;
	background-color: #262626;
	border-radius: 36px;
	align-items: center;
  justify-content: space-between;
  padding: 25px 20px;
}

.itemtext {
	font-size: 32px;
	font-weight: bold;
	color: white;
  text-overflow: ellipsis;
  lines: 1;
}
</style>
