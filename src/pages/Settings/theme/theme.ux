<template>
  <div class="page">
    <stack>
      <div class="component-nav"></div>
      <!-- 主题选择 -->
      <div class="content horizontal-center">
        <scroll
          class="theme-content"
          id="theme-list"
          style="display: flex; flex-direction: row"
          scroll-x="true"
          bounces="true"
          @scroll="updateHighlightLength"
        >
          <div
            class="theme-card horizontal-center"
            style="padding-left: 66px; padding-right: 66px"
            onclick="setHorizon()"
          >
            <text class="theme-name">紧凑</text>
            <div class="gap-80"></div>
            <image class="theme-preview" src="/common/setting_Horizon_Preview.png" />
            <div class="gap-80"></div>
            <img src="/common/more_button.png" class="choose-button-icon" />
          </div>
          <div
            class="theme-card horizontal-center"
            style="padding-left: 66px; padding-right: 66px"
            onclick="setNucleus()"
          >
            <text class="theme-name">聚焦</text>
            <div class="gap-80"></div>
            <image class="theme-preview" src="/common/setting_Nucleus_Preview.png" />
            <div class="gap-80"></div>
            <img src="/common/more_button.png" class="choose-button-icon" />
          </div>
        </scroll>
        <div class="indicator vertical-center" id="indicator">
          <div
            style="left :{{ indicatorHighlight_left }};"
            class="indicator-highlight"
            id="indicator_highlight"
          ></div>
        </div>
      </div>
      <div class="component-nav">
        <div class="component-nav-backGroup" onclick="exit">
          <img src="/common/back_button.png" class="component-nav-backButton" />
          <text class="component-nav-title-text-backb">{{ title }}</text>
        </div>
        <text class="component-nav-title-time">{{ time }}</text>
      </div>
    </stack>
  </div>
</template>
<script>
export default {
  private: {
    title: "主题选择",
    time: "",
    timer: null,
    settingItems: "index",
    ThemeName: "Horizon",
    indicatorHighlight_width: "",
    indicatorHighlight_left: ""
  },

  updateHighlightLength(event) {
    const {scrollX, scrollY} = event
    console.log("scrollX:", scrollX, "scrollY:", scrollY)
    if (scrollX === 336) {
      this.indicatorHighlight_left = "69px"
    } else if (scrollX === 0) {
      this.indicatorHighlight_left = "0px"
    }
  },


  onInit() {},

  async onShow() {
    ;(this.time = this.$app.$def.timeUpdate.updateTime().time),
      (this.timer = this.$app.$def.timeUpdate.updateTimePerminute((timeData) => {
        this.time = timeData.time
      }))
    // console.log("this.timer", this.time)
    this.settingItems = "index"

    try {
      // 主题定位
      const userSetting = await this.$app.$def.dataManage.getUserSetting() // TODO 原先已初始化的时候可以读取到，没有初始化就读不到，之后分离一下
      this.ThemeName = userSetting.setting.themeName
      console.log("this.ThemeName", this.ThemeName)
      if (this.ThemeName === "Horizon") {
        this.$element("theme-list").scrollTo({
          left: 0,
          behavior: "smooth"
        })
      } else if (this.ThemeName === "Nucleus") {
        this.$element("theme-list").scrollBy({
          left: 336,
          behavior: "smooth"
        })
      }
    } catch (e) {
      console.error("获取用户设置失败:", e)
    }
  },

  onDestroy() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
  },
  onHide() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
  },

  exit() {
    this.$app.$def.router.back()
  },

  setHorizon() {
    this.$app.$def.dataManage.changeUserSetting("themeName", "Horizon")
    setTimeout(() => {
        this.$app.$def.router.push({
            uri: "pages/index",
            params: {
                ___PARAM_LAUNCH_FLAG___: "clearTask"
            }
        });
    }, 100);
  },

  setNucleus() {
    this.$app.$def.dataManage.changeUserSetting("themeName", "Nucleus")
    
    // 添加 0.1 秒等待
    setTimeout(() => {
        this.$app.$def.router.push({
            uri: "pages/index",
            params: {
                ___PARAM_LAUNCH_FLAG___: "clearTask"
            }
        });
    }, 100); // 等待 0.1 秒的数据加载完毕
}
}
</script>

<style>
@import "../../../../common/css/universal.css";
@import "../../../../common/css/component.css";

.content {
  width: 336px;
  height: 480px;
}

.theme-content {
  width: 100%;
  height: 480px;
  top: 56px;

  display: flex;
  flex-direction: column;

  scroll-snap-type: x cross;
  scroll-snap-stop: always;
}

.theme-card {
  scroll-snap-align: center;
  scroll-snap-stop: always;
}
.theme-name {
  color: #ffffff;
  text-align: center;
  font-size: 28px;
  font-weight: 600;
}

/* 进度条组件 */
.indicator {
  position: absolute;
  bottom: 8px;

  width: 136px;
  height: 8px;
  opacity: 1;
  border-radius: 4px;
  background-color: rgba(255, 255, 255, 0.2);
}
.indicator-highlight {
  height: 8px;
  width: 69px;
  opacity: 1;
  border-radius: 4px;
  background-color: #ffffff;
}
</style>
