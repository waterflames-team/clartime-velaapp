<template>
  <div class="page">
    <stack>
      <div class="horizontal-center">
        <div class="component-nav"></div>
        <div class="component-allCourses-header"></div>
        <div class="gap-480"></div>
        <div class="gap-480"></div>
        <div class="gap-480" if="{{!loding}}"></div>
        <div if="{{loding}}" class="horizontal-center">
          <text class="component-coursePresentations-promptText">
            加载中....
          </text>
          <text class="component-coursePresentations-promptText">
            无响应时请检查数据
          </text>
        </div>
        <div if="{{!haveClass && !loding}}">
          <text class="component-coursePresentations-promptText">当日无课</text>
        </div>
      </div>

      <scroll class="component-allCourses-list horizontal-center" id="scrollList" scroll-y="true" bounces="true">
        <div class="component-nav-noback"></div>
        <div class="component-allCourses-header"></div>
        <div for="{{courseSchedule}}" if="{{!loding && haveClass}}">
          <div class="component-coursePresentations-border" if="{{$item.type === 'course'}}">
            <div class="component-coursePresentations-content">
              <div class="gap-142"></div>
              <text class="component-coursePresentations-text">{{ $item.description }}</text>
              <text class="component-coursePresentations-courses">{{ $item.courseName }}</text>
              <div class="gap-80"></div>
              <text class="component-coursePresentations-text">{{ $item.timeRange }}</text>
              <text class="component-coursePresentations-text">{{ $item.courseRoom }}</text>
              <text class="component-coursePresentations-text">{{ $item.courseTeacher }}</text>
            </div>
          </div>
        </div>
        <div class="gap-300"></div>
      </scroll>

      <div class="horizontal-center" style="height: 88px;">
        <div class="component-nav"></div>
        <div if="{{!loding}}" class="component-allCourses-header">
          <text class="component-allCourses-title" onclick="dayDown"><<<</text>
          <text class="component-allCourses-title">{{ weekNum }}</text>
          <text class="component-allCourses-title" onclick="dayUp">>>></text>
        </div>
      </div>

      <div class="component-nav">
        <div class="component-nav-backGroup" onclick="exit">
          <img src="/common/assets/back_button.png" class="component-nav-backButton" />
          <text class="component-nav-title-text-backb">{{ title }}</text>
        </div>
        <text class="component-nav-title-time">{{ time }}</text>
      </div>
    </stack>
  </div>
</template>

<script>
export default {
  private: {
    dayNum: "",
    weekNum: "",
    dayMap: [
      {en: "Sun", zh: "周日"},
      {en: "Mon", zh: "周一"},
      {en: "Tue", zh: "周二"},
      {en: "Wed", zh: "周三"},
      {en: "Thu", zh: "周四"},
      {en: "Fri", zh: "周五"},
      {en: "Sat", zh: "周六"}
    ],

    title: "全部课程",
    time: "",
    timer: null,

    courseSchedule: [],
    haveClass: true,
    loding: true
  },

  async dataUpadate() {
    let dayIndex = new Date().getDay()
    this.dayNum = this.dayMap[dayIndex].en
    this.weekNum = this.dayMap[dayIndex].zh
    ;(this.time = this.$app.$def.timeUpdate.updateTime().time),
      (this.timer = this.$app.$def.timeUpdate.updateTimePerminute((timeData) => {
        this.time = timeData.time
      }))

    this.loding = true
    this.courseSchedule = await this.$app.$def.courseDataParse.getCourseSchedule(this.dayNum)
    if (this.courseSchedule === -1) {
      this.haveClass = false
    } else {
      this.haveClass = true
    }
    this.loding = false
  },

  onInit() {
    this.dataUpadate()
  },

  onDestroy() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
  },
  onHide() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
  },

  async dayDown() {
    // console.log(!this.loding);
    let currentIndex = this.dayMap.findIndex((item) => item.en === this.dayNum)
    let prevIndex = (currentIndex - 1 + 7) % 7
    this.dayNum = this.dayMap[prevIndex].en
    this.weekNum = this.dayMap[prevIndex].zh

    this.loding = true
    this.courseSchedule = await this.$app.$def.courseDataParse.getCourseSchedule(this.dayNum)
    if (this.courseSchedule === -1) {
      this.haveClass = false
    } else {
      this.haveClass = true
    }
    this.loding = false
    this.$element("scrollList").scrollTo({
      top: 0,
      behavior: "smooth"
    })
  },
  async dayUp() {
    let currentIndex = this.dayMap.findIndex((item) => item.en === this.dayNum)
    let nextIndex = (currentIndex + 1) % 7
    this.dayNum = this.dayMap[nextIndex].en
    this.weekNum = this.dayMap[nextIndex].zh

    this.loding = true
    this.courseSchedule = await this.$app.$def.courseDataParse.getCourseSchedule(this.dayNum)
    if (this.courseSchedule === -1) {
      this.haveClass = false
    } else {
      this.haveClass = true
    }
    this.loding = false
    
    this.$element("scrollList").scrollTo({
      top: 0,
      behavior: "smooth"
    })
  },

  // getCourse() {
  //   this.courseSchedule = this.$app.$def.courseDataParse.getCourseSchedule(this.dayNum);
  //   this.loding = false;
  // },

  exit() {
    this.$app.$def.router.push({
      uri: "pages/entries",
      params: {
        ___PARAM_LAUNCH_FLAG___: "clearTask"
      }
    })
  },

  onBackPress() {
    this.$app.$def.router.push({
      uri: "pages/entries",
      params: {
        ___PARAM_LAUNCH_FLAG___: "clearTask"
      }
    })
    return true
  }
}
</script>

<style>
@import "../../common/style/universal.css";
@import "../../common/style/component.css";

.component-allCourses-header {
  display: flex;
  justify-content: space-around; /* 或者 space-between / space-evenly */
  align-items: center; /* 垂直居中，可选 */
  width: 100%; /* 宽度占满父容器，可选 */

  height: 32px;
}

.component-allCourses-list {
  /* margin-bottom: 30px; */
  width: 336px;
  height: 480px;


  scroll-snap-align: start;
}

.component-allCourses-title {
  opacity: 1;
  font-size: 24px;
  font-weight: 550;
  letter-spacing: 0px;
  line-height: 31.82px;
  color: rgba(255, 255, 255, 0.6);
  text-align: left;
  vertical-align: top;
}

.component-coursePresentations-weekNumText {
  font-size: 18px;
  font-weight: 600;
  letter-spacing: 0px;
  line-height: 23.87px;
  color: rgba(255, 255, 255, 0.6);
  text-align: center;
  vertical-align: top;
}

.component-coursePresentations-border {
  display: flex;
  justify-content: center;
  align-items: center;

  width: 318px;
  height: 185px;
}

.component-coursePresentations-content {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;

  left: 0px;
  top: 0px;
  width: 318px;
  height: 177px;
  opacity: 1;
  border-radius: 36px;
  background-color: rgba(38, 38, 38, 1);
}

.component-coursePresentations-text {
  left: 19px;
  opacity: 1;
  font-size: 20px;
  font-weight: 550;
  letter-spacing: 0px;
  line-height: 26.52px;
  color: rgba(255, 255, 255, 0.6);
  text-align: left;
  vertical-align: top;
}

.component-coursePresentations-courses {
  left: 19px;
  opacity: 1;
  font-size: 32px;
  font-weight: 550;
  letter-spacing: 0px;
  line-height: 42.43px;
  color: rgba(255, 255, 255, 1);
  text-align: left;
  vertical-align: top;
}

.component-coursePresentations-promptText {
  opacity: 1;
  font-size: 32px;
  font-weight: 550;
  letter-spacing: 0px;
  line-height: 42.43px;
  color: rgba(255, 255, 255, 1);
  text-align: left;
  vertical-align: top;
}
</style>
