<template>
  <div class="page">
    <stack>
      <!-- 主题选择 -->
      <div class="content horizontal-center">
        <div class="component-button card">
          <text class="component-text">Horizon</text>
          <input
            class="radio"
            type="radio"
            name="ThemeName"
            value="Horizon"
            checked="{{this.ThemeName === 'Horizon'}}"
            @change="onThemeNameChange"
          />
        </div>
        <div class="component-button card">
          <text class="component-text">Nucleus</text>
          <input
            class="radio"
            type="radio"
            name="ThemeName"
            value="Nucleus"
            checked="{{this.ThemeName === 'Nucleus'}}"
            @change="onThemeNameChange"
          />
        </div>

        <div class="component-nav">
          <div class="component-nav-backGroup" onclick="exit">
            <img src="/common/back_button.png" class="component-nav-backButton" />
            <text class="component-nav-title-text-backb">{{ title }}</text>
          </div>
          <text class="component-nav-title-time">{{ time }}</text>
        </div>
      </div>
    </stack>
  </div>
</template>
<script>
export default {
  private: {
    title: "主题选择",
    time: "",
    timer: null,
    settingItems: "index",
    ThemeName: "Horizon"
  },

  onInit() {
    this.$app.$def.storage.get({
      key: "themeName",
      default: "Horizon", // 无数据时，默认使用Horizon主题
      success: function (data) {
        console.log("handling success")
        this.ThemeName = data
      },
      fail: function (code) {
        console.log(`handling fail, code = ${code}`)
      }
    })
  },

  onShow() {
    ;(this.time = this.$app.$def.timeUpdate.updateTime().time),
      (this.timer = this.$app.$def.timeUpdate.updateTimePerminute((timeData) => {
        this.time = timeData.time
      }))
    // console.log("this.timer", this.time)
    this.settingItems = "index"
  },

  onDestroy() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
  },
  onHide() {
    this.$app.$def.timeUpdate.stopTimer(this.timer) // 清除定时器，防止内存泄漏
  },

  exit() {
    this.$app.$def.router.back()
  },

  setSettingItems(item) {
    this.settingItems = item
    // console.log("setSettingItems: item")
  },

  onThemeNameChange(e) {
    this.ThemeName = e.value

    this.$app.$def.storage.set({
      key: "themeName",
      value: this.ThemeName,
      success: function () {
        console.log("handling success")
      },
      fail: function (code) {
        console.log(`handling fail, code = ${code}`)
      }
    })

    console.log(`ThemeName = ${this.ThemeName}`)
  }
}
</script>

<style>
@import "../../../../common/css/universal.css";
@import "../../../../common/css/component.css";

.content {
  width: 336px;
  height: 480px;

  display: flex;
  flex-direction: column;

  scroll-snap-type: y cross;
}

.card {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
}
</style>
